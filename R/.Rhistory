source('~/Development/Super-Effects/R/VSL.R')
rm(list=ls())
### run analysis of sample size x effect size variability on the SRT data
# ----------------------------------------------------------------------------------------------------
# load packages and source function files
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the location of this file
# uncomment the below and run if you need to install the packages
# install.packages("tidyverse")
# install.packages("wesanderson")
# install.packages("cowplot")
library(wesanderson) # palette for some sweet figure colours
library(cowplot)
library(lme4) # for mixed effects modelling
library(ggridges)
library(parallel)
library(tidyverse) # for data wrangling
source("efilids_functions.R") # custom functions written for this project
source("R_rainclouds.R") # functions for plotting
set.seed(42) # testing diff seeds on output
# ----------------------------------------------------------------------------------------------------
# load data and wrangle into tidy form (see https://r4ds.had.co.nz/tidy-data.html), plus relabel to make
# labels a little simpler
# ----------------------------------------------------------------------------------------------------
dat = read.csv("../data/total_of_313_subs_VSL_task_trial_level_data.csv", header=TRUE)
setwd("~/Development/Super-Effects/R")
rm(list=ls())
### run analysis of sample size x effect size variability on the SRT data
# ----------------------------------------------------------------------------------------------------
# load packages and source function files
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the location of this file
# uncomment the below and run if you need to install the packages
# install.packages("tidyverse")
# install.packages("wesanderson")
# install.packages("cowplot")
library(wesanderson) # palette for some sweet figure colours
library(cowplot)
library(lme4) # for mixed effects modelling
library(ggridges)
library(parallel)
library(tidyverse) # for data wrangling
source("efilids_functions.R") # custom functions written for this project
source("R_rainclouds.R") # functions for plotting
set.seed(42) # testing diff seeds on output
# ----------------------------------------------------------------------------------------------------
# load data and wrangle into tidy form (see https://r4ds.had.co.nz/tidy-data.html), plus relabel to make
# labels a little simpler
# ----------------------------------------------------------------------------------------------------
dat = read.csv("../data/total_of_313_subs_VSL_task_trial_level_data.csv", header=TRUE)
rm(list=ls())
library(wesanderson) # palette for some sweet figure colours
library(cowplot)
library(lme4) # for mixed effects modelling
library(ggridges)
library(parallel)
library(tidyverse) # for data wrangling
source("efilids_functions.R") # custom functions written for this project
source("R_rainclouds.R") # functions for plotting
set.seed(42) # testing diff seeds on output
# ----------------------------------------------------------------------------------------------------
# load data and wrangle into tidy form (see https://r4ds.had.co.nz/tidy-data.html), plus relabel to make
# labels a little simpler
# ----------------------------------------------------------------------------------------------------
dat = read.csv("../data/total_of_313_subs_VSL_task_trial_level_data.csv", header=TRUE)
# ----------------------------------------------------------------------------------------------------
# load data and wrangle into tidy form (see https://r4ds.had.co.nz/tidy-data.html), plus relabel to make
# labels a little simpler
# ----------------------------------------------------------------------------------------------------
dat = read.csv("../total_of_313_subs_VSL_task_trial_level_data.csv", header=TRUE)
# data frame contains TRUE ordering
prev.dat <- dat %>% select(Subj.No, Trial.No, Response, Target.Order, Accuracy)
prev.dat$Response <- as.factor(prev.dat$Response)
prev.dat$Target.Order <- as.factor(prev.dat$Target.Order)
prev.dat <- prev.dat %>% mutate(Response = recode(Response,
"122" = "Novel",
"109" = "Repeat"),
Target.Order = recode(Target.Order,
"1" = "Novel",
"2" = "Repeat"))
View(prev.dat)
View(prev.dat)
sub.Ns = round(exp(seq(log(13), log(313), length.out = 20)))
sub.Ns = 13
n.perms =1000# for each sample size, we will repeat our experiment n.perms times
k = 1000 #for Monte Carlo simulations for prevalence stats (applies to both first level and second level perms)
Np = 1000
cores = 30
cores = 8
subs  <- unique(prev.dat$Subj.No)
start  <-  Sys.time()
# do I want to change the below to mclapply also?
lapply(sub.Ns, function(x) run.outer(in.data=prev.dat, subs=subs, N=x, k=n.perms, j=1, cores=cores, ffx.f=run.os.t.test.sim, rfx.f=run.prev.test, fstem="VSL_N-%d_parent-%d.RData"))
end <-  Sys.time()
end - start
idx = sample.N(subs=subs, N=313, k=1, replace=TRUE)
idx
View(idx)
View(idx)
names(prev.dat)
# do I want to change the below to mclapply also?
#lapply(sub.Ns, function(x) run.outer(in.data=prev.dat, subs=subs, N=x, k=n.perms, j=1, cores=cores, ffx.f=run.os.t.test.sim, rfx.f=run.prev.test, fstem="VSL_N-%d_parent-%d.RData"))
lapply(sub.Ns, function(x) run.outer(in.data=prev.dat, subs=subs, N=x, k=n.perms, j=1, cores=cores, ffx.f=run.os.t.test.sim, rfx.f=run.os.t.test.sim, fstem="VSL_N-%d_parent-%d.RData"))
# do I want to change the below to mclapply also?
#lapply(sub.Ns, function(x) run.outer(in.data=prev.dat, subs=subs, N=x, k=n.perms, j=1, cores=cores, ffx.f=run.os.t.test.sim, rfx.f=run.prev.test, fstem="VSL_N-%d_parent-%d.RData"))
lapply(sub.Ns, function(x) run.outer(in.data=prev.dat, subs=subs, N=x, k=n.perms, j=1, cores=cores, ffx.f=run.prev.test, rfx.f=run.prev.test, fstem="VSL_N-%d_parent-%d.RData"))
samp.data <- prev.dat
ntrials = max(samp.data$Trial.No)
nsubs <- length(samp.data$Trial.No)/ntrials
samp.data$sub <- rep(1:nsubs, each=ntrials)
names(samp.data)[names(samp.data) == "Trial.No"] = "trial"
flvl.perms <- get.flvl.perms(samp.data, 1000, nsubs)
source("efilids_functions.R") # custom functions written for this project
flvl.perms <- get.flvl.perms(samp.data, 1000, nsubs)
k = 1000
NfL = 1000
alpha = 0.05
slvl.idx = rbind(gen.samps(k, nsubs)) %>% arrange(shuffle, sub)
# computes prevalence statistic, given a set of second level permutations (and original scores)
# Based on: https://github.com/allefeld/prevalence-permutation/blob/master/prevalenceCore.m - lines 160-168, also
# k = the number second level permutation you want to extract from the data
# first select the minimum statistic from the neutral permutation
# sort out this one
neut_m <- min(unlist(lapply(unique(samp.data$sub), function(x) with(samp.data[samp.data$sub == x, ], mean(Response==Target.Order)))))
# now compute the probability of the minimum value (equation 24 of 10.1016/j.neuroimage.2016.07.040)
# perm_mins <- t(do.call(rbind, lapply(c(1:max(data$k)), function(x) min(data$acc[data$k == x]))))
# THE BELOW ONLY WORKS BECAUSE THE DATA ARE IN PROPORTION CORRECT. WOULD NOT WORK FOR PERCENTAGES!
puGN <- sum(unlist(lapply(unique(slvl.idx$shuffle), function(x) min(inner_join(slvl.idx[slvl.idx$shuffle==x, ], flvl.perms, by=c("sub", "p"))))) >= neut_m)/NfL
if (puGN > alpha) gamma_zero = 0 # not significant so not defined with a prevalence value
####### attain upper bound on the gamma null that can be rejected (see equation 20 of 10.1016/j.neuroimage.2016.07.040)
gamma_zero = (alpha^(1/nsubs) - puGN^(1/nsubs)) / (1 - puGN^(1/nsubs))
View(flvl.perms)
View(flvl.perms)
7512 * 999
313 * 999
choose(2, 0)
choose(2, 1)
choose(2, 2)
choose(2, 2) * choose(2, 0)
choose(2, 1) * choose(2, 1)
choose(2, 0) * choose(2, 2)
replicate
help(replicate)
